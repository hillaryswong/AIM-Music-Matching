#THIS IS A GENERAL LAYOUT OF ALL THE FUNCTIONS WE NEED ACROSS PROGRAM FILES
#ATM THERE IS A LOT OF CODE DUPLICATION, BUT WE CAN CUT DOWN ON THAT LATER

import spotipy
from spotipy.oauth2 import SpotifyOAuth

#authenticate + connect to spotify API
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id="YOUR_CLIENT_ID",
                                               client_secret="YOUR_CLIENT_SECRET",
                                               redirect_uri="YOUR_REDIRECT_URI",
                                               scope="playlist-modify-public user-library-read"))

#Get user's playlists // HELPER
def get_user_playlists(user_id):
    #code here
    pass

#Get 'Liked Songs' and 'Liked Songs - Matchify' playlists // HELPER
def get_liked_songs(user_id):
    #code here
    pass

#Implement "Neo-Pooler" system // RECOMMENDATION SYSTEM 1 - SIMILAR SONGS GENERATOR
def neo_pooler(user_id):
    #code here
    pass

#Implement "Pool-Matcher" system // RECOMMENDATION SYSTEM 2 - USER-USER COMPATIBILITY RANKER
def pool_matcher(users_data):
    #code here
    pass

#Implement 'Discover' feature // FEATURE EXPANSION 1 - will recommend a new song (chosen from a
#                                user's similar songs pool generated by the "Neo-Pooler" system)
#                                up to 5 times per day for each user to listen to. Users will have
#                                the ability to: 'like' that song by swiping right on the song or
#                                'dislike' that song by swiping left on the song. If possible, I'd
#                                like feature integration within Spotify itself for this, meaning,
#                                when a user 'likes' a song in Matchify, the app will send a
#                                request to Spotify to add that song to a playlist called 'Liked
#                                Songs - Matchify'
def discover(user_id):
    #code here
    pass

#Implement 'UserUpdate' feature // FEATURE EXPANSION 2 - hidden from users and tells the
#                                  "Neo-Pooler" to re-create a given user's pool of new, similar
#                                  songs based on the amount of their activity in the app. I want
#                                  the update feature to run every time the user has reached 20
#                                  new songs in their 'Liked Songs - Matchify' playlist. This
#                                  feature serves to update the user-to-user recommendations as a
#                                  given user's song preferences evolve over time.
def user_update(user_id):
    #code here
    pass
